<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rentTypeNpc">
	<resultMap id="rentTypeRstMap" type="rentType">
		<id property="id" column="ID"/>
		<result property="createdDt" column="CREATED_DT" />
		<result property="updatedDt" column="UPDATED_DT" />
		<result property="typeName" column="TYPE_NAME" />
		<result property="rentFee" column="RENT_FEE" />
		<result property="insuranceFee" column="INSURANCE_FEE" />
		<result property="fuelFee" column="FUEL_FEE" />
		<result property="exceedMinuteToHour" column="EXCEED_MINUTE_TO_HOUR" />
		<result property="exceedHourFee" column="EXCEED_HOUR_FEE" />
		<result property="exceedMeterToKilometer" column="EXCEED_METER_TO_KILOMETER" />
		<result property="exceedKilometerFee" column="EXCEED_KILOMETER_FEE" />
		<result property="loadLimit" column="LOAD_LIMIT" />
		<result property="content" column="CONTENT" />
		<association property="createdUser" column="CREATED_USER" select="adminNpc.queryByAdminId"/>
		<association property="updatedUser" column="UPDATED_USER" select="adminNpc.queryByAdminId"/>
		<collection property="carSeriesList" javaType="java.util.ArrayList" ofType="carSeries" select="carSeriesNpc.queryByRentTypeId" column="id" />
	</resultMap>

	<sql id="query_where">
		<where>
			<if test="rentType != null">
				<if test="rentType.id != null and rentType.id != ''">
					and T.ID = #{rentType.id}
				</if>
				<if test="rentType.typeName != null and rentType.typeName != ''">
					and T.TYPE_NAME like '%${rentType.typeName}%'
				</if>
				<if test="rentType.rentFee != null and rentType.rentFee != ''">
				<![CDATA[
					and T.RENT_FEE <= #{rentType.rentFee}
				]]>
				</if>
				<if test="rentType.loadLimit != null and rentType.loadLimit != ''">
				<![CDATA[
					and T.LOAD_LIMIT >= #{rentType.loadLimit}
				]]>
				</if>
			</if>
		</where>
	</sql>
	<sql id="queryEquals_where">
		<where>
			<if test="rentType != null">
				<if test="rentType.id != null and rentType.id != ''">
					and T.ID = #{rentType.id}
				</if>
				<if test="rentType.typeName != null and rentType.typeName != ''">
					and T.TYPE_NAME = #{rentType.typeName}
				</if>
				<if test="rentType.rentFee != null and rentType.rentFee != ''">
					and T.RENT_FEE = #{rentType.rentFee}
				</if>
				<if test="rentType.loadLimit != null and rentType.loadLimit != ''">
					and T.LOAD_LIMIT = #{rentType.loadLimit}
				</if>
			</if>
		</where>
	</sql>
	<sql id="limit">
		<if test="pager != null">
			limit ${pager.startIndex}, ${pager.pageSize}
		</if>
	</sql>

	<select id="queryList" resultMap="rentTypeRstMap" parameterType="map">
		SELECT T.* FROM `T_RENT_TYPE` T
		<include refid="query_where" />
		order by T.RENT_FEE asc
		<include refid="limit"/>
	</select>
	
	<select id="queryEqualsList" resultMap="rentTypeRstMap" parameterType="map">
		SELECT T.* FROM `T_RENT_TYPE` T
		<include refid="queryEquals_where" />
		order by T.RENT_FEE asc
		<include refid="limit"/>
	</select>
	
	<select id="count" resultType="int" parameterType="map">
		select count(T.ID) FROM T_RENT_TYPE T
		<include refid="query_where"/>
	</select>
	
	<select id="queryByCityId" resultMap="rentTypeRstMap" parameterType="map">
		SELECT T.* FROM `T_RENT_TYPE` T
		where T.id = #{id}
	</select>
	
	<insert id="add" parameterType="rentType">
		<selectKey resultType="java.lang.String" keyProperty="id" order="AFTER" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO `T_RENT_TYPE`(
			CREATED_USER, CREATED_DT, UPDATED_USER, UPDATED_DT,
			TYPE_NAME, RENT_FEE, INSURANCE_FEE, FUEL_FEE, EXCEED_MINUTE_TO_HOUR,
			EXCEED_HOUR_FEE, EXCEED_METER_TO_KILOMETER, EXCEED_KILOMETER_FEE, LOAD_LIMIT, CONTENT
		) VALUES (
			#{createdUser.id}, NOW(), #{updatedUser.id}, NOW(),
			#{typeName}, #{rentFee}, #{insuranceFee}, #{fuelFee}, #{exceedMinuteToHour},
			#{exceedHourFee}, #{exceedMeterToKilometer}, #{exceedKilometerFee}, #{loadLimit}, #{content}
		)
	</insert>
	
	<update id="update" parameterType="rentType">
		update `T_RENT_TYPE` set
			UPDATED_USER = #{updatedUser.id},
			UPDATED_DT = NOW(),
			TYPE_NAME = #{typeName},
			RENT_FEE = #{rentFee},
			INSURANCE_FEE = #{insuranceFee},
			FUEL_FEE = #{fuelFee},
			EXCEED_MINUTE_TO_HOUR = #{exceedMinuteToHour},
			EXCEED_HOUR_FEE = #{exceedHourFee},
			EXCEED_METER_TO_KILOMETER = #{exceedMeterToKilometer},
			EXCEED_KILOMETER_FEE = #{exceedKilometerFee},
			LOAD_LIMIT = #{loadLimit},
			CONTENT = #{content}
			
			WHERE ID = #{id}
	</update>
	
	<delete id="delete" parameterType="string">
		delete from `T_RENT_TYPE` where ID in (${_parameter})
	</delete>
	
	<insert id="addCarSeriesList" parameterType="rentType">
		INSERT INTO T_RENTTYPE_CARSERIES (
			TYPE_ID, SERIES_ID
		) VALUES 
		<foreach collection="carSeriesList" item="carSeries" index="index" separator=",">
		(
			#{id}, #{carSeries.id}
		)
		</foreach>
	</insert>
	
	<delete id="deleteResources" parameterType="string">
		delete from `T_RENTTYPE_CARSERIES` where TYPE_ID in (${_parameter})
	</delete>
</mapper>