<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="businessNpc">
	<resultMap id="businessRstMap" type="business">
		<id property="id" column="id"/>
		<result property="createdDt" column="created_dt" />
		<result property="updatedDt" column="updated_dt" />
		<result property="businessType" column="business_type" />
		<result property="rentFee" column="rent_fee" />
		<result property="insuranceFee" column="insurance_fee" />
		<result property="fuelFee" column="fuel_fee" />
		<result property="driverFee" column="driver_fee" />
		<result property="baseHour" column="base_hour" />
		<result property="exceedMinuteToHour" column="exceed_minute_to_hour" />
		<result property="exceedHourFee" column="exceed_hour_fee" />
		<result property="baseKilometer" column="base_kilometer" />
		<result property="exceedMeterToKilometer" column="exceed_meter_to_kilometer" />
		<result property="exceedKilometerFee" column="exceed_kilometer_fee" />
		<result property="content" column="content" />
		<association property="rentType" column="renttype_id" select="rentTypeNpc.queryByRentTypeId"/>
		<association property="createdUser" column="created_user" select="adminNpc.queryByAdminId"/>
		<association property="updatedUser" column="updated_user" select="adminNpc.queryByAdminId"/>
	</resultMap>

	<sql id="query_where">
		<where>
			<if test="business != null">
				<if test="business.id != null and business.id != ''">
					and T.id = #{business.id}
				</if>
				<if test="business.businessType != null and business.businessType != ''">
					and T.business_type = #{business.businessType}
				</if>
				<if test="business.rentFee != null and business.rentFee != ''">
				<![CDATA[
					and T.rent_fee <= #{business.rentFee}
				]]>
				</if>
				<if test="business.rentType != null">
					<if test="business.rentType.id != null and business.rentType.id != ''">
						and T.renttype_id = #{business.rentType.id}
					</if>
					<if test="business.rentType.typeName != null and business.rentType.typeName != ''">
						and RT.type_name like '%${business.rentType.typeName}%'
					</if>
				</if>
			</if>
		</where>
	</sql>
	<sql id="queryEquals_where">
		<where>
			<if test="business != null">
				<if test="business.id != null and business.id != ''">
					and T.id = #{business.id}
				</if>
				<if test="business.businessType != null and business.businessType != ''">
					and T.business_type = #{business.businessType}
				</if>
				<if test="business.rentFee != null and business.rentFee != ''">
					and T.rent_fee = #{business.rentFee}
				</if>
			</if>
				<if test="business.rentType != null">
					<if test="business.rentType.id != null and business.rentType.id != ''">
						and T.renttype_id = #{business.rentType.id}
					</if>
					<if test="business.rentType.typeName != null and business.rentType.typeName != ''">
						and RT.type_name = #{business.rentType.typeName}
					</if>
				</if>
		</where>
	</sql>
	<sql id="limit">
		<if test="pager != null">
			limit ${pager.startIndex}, ${pager.pageSize}
		</if>
	</sql>

	<select id="queryList" resultMap="businessRstMap" parameterType="map">
		SELECT distinct T.* FROM `t_business` T
		left join t_rent_type RT on RT.id = T.renttype_id
		<include refid="query_where" />
		order by T.rent_fee asc
		<include refid="limit"/>
	</select>

	<select id="queryByBusinessId" resultMap="businessRstMap" parameterType="string">
		SELECT T.* FROM `t_business` T
		where T.id = #{id}
	</select>
	
	<select id="queryEqualsList" resultMap="businessRstMap" parameterType="map">
		SELECT distinct T.* FROM `t_business` T
		left join t_rent_type RT on RT.id = T.renttype_id
		<include refid="queryEquals_where" />
		order by T.rent_fee asc
		<include refid="limit"/>
	</select>
	
	<select id="count" resultType="int" parameterType="map">
		select count(distinct T.id) FROM t_business T
		left join t_rent_type RT on RT.id = T.renttype_id
		<include refid="query_where"/>
	</select>
	
	<select id="countEquals" resultType="int" parameterType="map">
		select count(distinct T.id) FROM t_business T
		left join t_rent_type RT on RT.id = T.renttype_id
		<include refid="queryEquals_where"/>
	</select>
	
	<insert id="add" parameterType="business">
		<selectKey resultType="java.lang.String" keyProperty="id" order="AFTER" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO `t_business`(
			created_user, created_dt, updated_user, updated_dt,
			business_type, rent_fee, insurance_fee, fuel_fee, exceed_minute_to_hour,
			exceed_hour_fee, exceed_meter_to_kilometer, exceed_kilometer_fee, content, renttype_id,
			base_hour, base_kilometer, driver_fee
		) VALUES (
			#{createdUser.id}, NOW(), #{updatedUser.id}, NOW(),
			#{businessType}, #{rentFee}, #{insuranceFee}, #{fuelFee}, #{exceedMinuteToHour},
			#{exceedHourFee}, #{exceedMeterToKilometer}, #{exceedKilometerFee}, #{content}, #{rentType.id},
			#{baseHour}, #{baseKilometer}, #{driverFee}
		)
	</insert>
	
	<update id="update" parameterType="business">
		update `t_business` set
			updated_user = #{updatedUser.id},
			updated_dt = NOW(),
			business_type = #{businessType},
			rent_fee = #{rentFee},
			insurance_fee = #{insuranceFee},
			fuel_fee = #{fuelFee},
			exceed_minute_to_hour = #{exceedMinuteToHour},
			exceed_hour_fee = #{exceedHourFee},
			exceed_meter_to_kilometer = #{exceedMeterToKilometer},
			exceed_kilometer_fee = #{exceedKilometerFee},
			content = #{content},
			renttype_id = #{rentType.id},
			base_hour = #{baseHour},
			base_kilometer = #{baseKilometer},
			driver_fee = #{driverFee}
			
			WHERE id = #{id}
	</update>
	
	<delete id="delete" parameterType="string">
		delete from `t_business` where id in (${_parameter})
	</delete>
</mapper>