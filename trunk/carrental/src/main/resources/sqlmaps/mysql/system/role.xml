<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="roleNpc">
	<resultMap id="roleRstMap" type="role">
		<id property="id" column="id"/>
		<result property="createdDt" column="created_dt" />
		<result property="updatedDt" column="updated_dt" />
		<result property="roleName" column="role_name" />
		<association property="createdUser" column="created_user" select="adminNpc.queryByAdminId"/>
		<association property="updatedUser" column="updated_user" select="adminNpc.queryByAdminId"/>
		<association property="city" column="city_id" select="cityNpc.queryByCityId"/>
		<collection property="resources" javaType="java.util.ArrayList" ofType="resource" select="resourceNpc.queryByRoleId" column="id" />
	</resultMap>

	<sql id="query_where">
		<where>
			<if test="role != null">
				<if test="role.id != null and role.id != ''">
					and T.id = #{role.id}
				</if>
				<if test="role.roleName != null and role.roleName != ''">
					and T.role_name like '%${role.roleName}%'
				</if>
				<if test="role.city != null">
					<if test="role.city.id != null and role.city.id != ''">
						and T.city_id = #{role.city.id}
					</if>
				</if>
			</if>
		</where>
	</sql>
	<sql id="queryEquals_where">
		<where>
			<if test="role != null">
				<if test="role.id != null and role.id != ''">
					and T.id = #{role.id}
				</if>
				<if test="role.roleName != null and role.roleName != ''">
					and T.role_name = #{role.roleName}
				</if>
				<if test="role.city != null">
					<if test="role.city.id != null and role.city.id != ''">
						and T.city_id = #{role.city.id}
					</if>
				</if>
			</if>
		</where>
	</sql>
	<sql id="limit">
		<if test="pager != null">
			limit ${pager.startIndex}, ${pager.pageSize}
		</if>
	</sql>

	<select id="queryList" resultMap="roleRstMap" parameterType="map">
		SELECT T.* FROM `t_role` T
		<include refid="query_where" />
		order by T.role_name asc
		<include refid="limit"/>
	</select>
	
	<select id="queryEqualsList" resultMap="roleRstMap" parameterType="map">
		SELECT T.* FROM `t_role` T
		<include refid="queryEquals_where" />
		order by T.role_name asc
		<include refid="limit"/>
	</select>
	
	<select id="count" resultType="int" parameterType="map">
		select count(T.id) FROM t_role T
		<include refid="query_where"/>
	</select>
	
	<select id="countEquals" resultType="int" parameterType="map">
		select count(T.id) FROM t_role T
		<include refid="queryEquals_where"/>
	</select>
	
	<select id="countByCityIds" resultType="int" parameterType="string">
		select count(T.id) FROM t_role T
		where T.city_id in (${_parameter})
	</select>
	
	<select id="queryByRoleId" resultMap="roleRstMap" parameterType="map">
		SELECT T.* FROM `t_role` T
		where T.id = #{id}
	</select>
	
	<insert id="add" parameterType="role">
		<selectKey resultType="java.lang.String" keyProperty="id" order="AFTER" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO `t_role`(
			created_user, created_dt, updated_user, updated_dt,
			role_name, city_id
		) VALUES (
			#{createdUser.id}, NOW(), #{updatedUser.id}, NOW(),
			#{roleName}, #{city.id}
		)
	</insert>
	
	<update id="update" parameterType="role">
		update `t_role` set
			updated_user = #{updatedUser.id},
			updated_dt = NOW(),
			role_name = #{roleName},
			city_id = #{city.id}
			
			WHERE id = #{id}
	</update>
	
	<delete id="delete" parameterType="string">
		delete from `t_role` where id in (${_parameter})
	</delete>
	
	<delete id="deleteResources" parameterType="string">
		delete from `t_role_resource` where role_id in (${_parameter})
	</delete>
	
	<insert id="addResources" parameterType="role">
		INSERT INTO t_role_resource (
			role_id, RESOURCE_id
		) VALUES 
		<foreach collection="resources" item="resource" index="index" separator=",">
		(
			#{id}, #{resource.id}
		)
		</foreach>
	</insert>
</mapper>